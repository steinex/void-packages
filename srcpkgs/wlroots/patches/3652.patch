From 93b2708008586d6992e222a411be6c2cf3b4b98b Mon Sep 17 00:00:00 2001
From: Kirill Primak <vyivel@eclair.cafe>
Date: Fri, 15 Jul 2022 08:31:30 +0300
Subject: [PATCH] seat/pointer: fix sending events

- Previously, send_axis_discrete() would reset acc_axis, which resulted
in only sending the event to the first pointer resource.
- If the client was too old, it didn't receive events at all.
---
 types/seat/wlr_seat_pointer.c | 50 ++++++++++++++++++++---------------
 1 file changed, 28 insertions(+), 22 deletions(-)

diff --git a/types/seat/wlr_seat_pointer.c b/types/seat/wlr_seat_pointer.c
index 7d37fb129..664d35d9c 100644
--- a/types/seat/wlr_seat_pointer.c
+++ b/types/seat/wlr_seat_pointer.c
@@ -279,7 +279,8 @@ static bool should_reset_value120_accumulators(int32_t current, int32_t last) {
 
 static void update_value120_accumulators(struct wlr_seat_client *client,
 		enum wlr_axis_orientation orientation,
-		double value, int32_t value_discrete) {
+		double value, int32_t value_discrete,
+		double *acc_value, int32_t *acc_value_discrete) {
 	int32_t *acc_discrete = &client->value120.acc_discrete[orientation];
 	int32_t *last_discrete = &client->value120.last_discrete[orientation];
 	double *acc_axis = &client->value120.acc_axis[orientation];
@@ -290,25 +291,27 @@ static void update_value120_accumulators(struct wlr_seat_client *client,
 	*acc_discrete += value_discrete;
 	*last_discrete = value_discrete;
 	*acc_axis += value;
-}
-
-static void send_axis_discrete(struct wlr_seat_client *client,
-		struct wl_resource *resource, uint32_t time,
-		enum wlr_axis_orientation orientation, double value,
-		int32_t value_discrete) {
-	int32_t *acc_discrete = &client->value120.acc_discrete[orientation];
-	double *acc_axis = &client->value120.acc_axis[orientation];
 
 	if (abs(*acc_discrete) < WLR_POINTER_AXIS_DISCRETE_STEP) {
+		*acc_value = 0.0;
+		*acc_value_discrete = 0;
 		return;
 	}
 
+	*acc_value = *acc_axis;
+	*acc_axis = 0.0;
+	
+	*acc_value_discrete = *acc_discrete / WLR_POINTER_AXIS_DISCRETE_STEP;
+	*acc_discrete -= *acc_value_discrete * WLR_POINTER_AXIS_DISCRETE_STEP;
+}
+
+static void send_axis_discrete(struct wl_resource *resource, uint32_t time,
+		enum wlr_axis_orientation orientation, double acc_value,
+		int32_t acc_value_discrete) {
 	wl_pointer_send_axis_discrete(resource, orientation,
-		*acc_discrete / WLR_POINTER_AXIS_DISCRETE_STEP);
+		acc_value_discrete);
 	wl_pointer_send_axis(resource, time, orientation,
-		wl_fixed_from_double(*acc_axis));
-	*acc_discrete %= WLR_POINTER_AXIS_DISCRETE_STEP;
-	*acc_axis = 0;
+		wl_fixed_from_double(acc_value));
 }
 
 static void send_axis_value120(struct wl_resource *resource, uint32_t time,
@@ -336,7 +339,10 @@ void wlr_seat_pointer_send_axis(struct wlr_seat *wlr_seat, uint32_t time,
 		send_source = true;
 	}
 
-	update_value120_accumulators(client, orientation, value, value_discrete);
+	double acc_value;
+	int32_t acc_value_discrete;
+	update_value120_accumulators(client, orientation, value, value_discrete,
+		&acc_value, &acc_value_discrete);
 
 	struct wl_resource *resource;
 	wl_resource_for_each(resource, &client->pointers) {
@@ -350,14 +356,14 @@ void wlr_seat_pointer_send_axis(struct wlr_seat *wlr_seat, uint32_t time,
 			wl_pointer_send_axis_source(resource, source);
 		}
 		if (value) {
-			if (value_discrete) {
-				if (version >= WL_POINTER_AXIS_VALUE120_SINCE_VERSION) {
-					send_axis_value120(resource, time, orientation, value,
-						value_discrete);
-				} else if (version >= WL_POINTER_AXIS_DISCRETE_SINCE_VERSION) {
-					send_axis_discrete(client, resource, time, orientation,
-						value, value_discrete);
-				}
+			if (version >= WL_POINTER_AXIS_VALUE120_SINCE_VERSION &&
+					value_discrete) {
+				send_axis_value120(resource, time, orientation,
+					value, value_discrete);
+			} else if (version >= WL_POINTER_AXIS_DISCRETE_SINCE_VERSION &&
+					acc_value_discrete) {
+				send_axis_discrete(resource, time, orientation,
+					acc_value, acc_value_discrete);
 			} else {
 				wl_pointer_send_axis(resource, time, orientation,
 					wl_fixed_from_double(value));
-- 
GitLab

